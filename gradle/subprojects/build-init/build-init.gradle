/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
dependencies {
    compile libraries.groovy
    compile project(':core')
    compile project(':plugins')
    compile project(':wrapper')
    integTestRuntime project(':maven')
    integTestRuntime project(':scala')
}

dependencies {
    components {
        all { ComponentMetadataDetails details ->
            def version = details.id.version
            if(version.matches("(\\d\\.?)+")){
                details.status = "release"
            } else {
                details.status = "integration"
            }
            details.statusScheme = ["integration", "release"]
        }
    }
}

task generateTemplateVersionFile(type: GenerateVersionProperties) {
    outputFile = new File(generatedResourcesDir, "org/gradle/buildinit/tasks/templates/library-versions.properties")
}

sourceSets.main.resources.srcDir generatedResourcesDir
processResources.dependsOn generateTemplateVersionFile

eclipseClasspath.dependsOn generateTemplateVersionFile
ideaModule.dependsOn generateTemplateVersionFile

class GenerateVersionProperties extends DefaultTask {

    @OutputFile
    File outputFile

    @TaskAction
    void generateFile() {
        resolveFiles()
    }

    def resolveFiles() {
        Properties versionProperties = new Properties()

        versionProperties.putAll([
            'scala-library': '2.11.8',
            scala: '2.11',
            scalatest: '3.0.0',
            'scala-xml': '1.0.5',
            groovy: '2.4.7',
            junit: '4.12',
            testng: '6.9.12',
            slf4j: '1.7.21',
            spock: '1.0-groovy-2.4'
        ])

        outputFile.withOutputStream { outputStream ->
            versionProperties.store(outputStream, "Version values used in build-init templates")
        }
    }

    private void findLatest(String name, String notation, Properties dest) {
        def libDependencies = [ project.dependencies.create(notation) ]
        def templateVersionConfiguration = project.configurations.detachedConfiguration(libDependencies as Dependency[])
        templateVersionConfiguration.transitive = false
        ResolutionResult resolutionResult = templateVersionConfiguration.incoming.resolutionResult
        resolutionResult.allComponents.findAll { it != resolutionResult.root }. each { dep -> dest.put(name, dep.id.version) }
    }
}

useTestFixtures()
useClassycle()
